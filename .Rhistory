#Downloading data
download.file("https://ndownloader.figshare.com/files/2292169/", "data/portal_data_joined.cvs")
#Downloading data
download.file("https://ndownloader.figshare.com/files/2292169", "data/portal_data_joined.cvs")
#Load the data
surveys <- read.csv("data/portal_data_joined.cvs")
View(surveys)
#Examine the first 6 lines
head(surveys)
#Structure
str(surveys)
#Indexing and subsettings
surveys [1,1] #first element in first column
surveys [1, 6] #first element in 6 column
surveys [1:3, 7] #first 3 elements in the 7 column
surveys [ ,1] #all values in first column
surveys [8:11] #all values in rows 8 to 11
surveys [8:11, ] #all values in rows 8 to 11
download.file("http://pad.software-carpentry.org/2018-06-18-huddersfield", "data/portal_data_joined2.cvs")
surveys_200 <- read.csv(data/portal_data_joined.cvs)
surveys_200 <- read.csv(data/portal_data_joined2.cvs)
surveys_200 <- read.csv("data/portal_data_joined2.cvs")
View(surveys_200)
View(surveys_200)
View(surveys_200)
View(surveys_200)
View(surveys)
#Create a data.frame (surveys_200) containing only the data in row 200 of the surveys dataset
surveys_200 <- surveys [200, ]
View(surveys_200)
#number of rows
nrow(surveys)
surveys_last <- surveys [n_rows, ]
#Pull out that last row using nrow() instead of the row number.
n_rows <- nrow(surveys)
surveys_last <- surveys [n_rows, ]
View(surveys_last)
#Pull out that last row using nrow() instead of the row number.
n_rows <- nrow(surveys)
#Use nrow() to extract the row that is in the middle of the data frame. Store the content of this row in an object named surveys_middle
middle_row <- nrow(surveys)/2
surveys_middle <-  surveys [middle row, ]
surveys_middle <-  surveys["middle row", ]
View(surveys_middle)
#Combine nrow() with the - notation above to reproduce the behavior of head(surveys), keeping just the first through 6th rows of the surveys dataset
surveys_head <- surveys [-(7:n_rows), ]
View(surveys_head)
# Factors
sex <- factor(c("male", "female", "female", "male"))
levels(sex)
nlevels(sex)
#plot of females captured against males (in surveys)
plot(surveys$sex)
levels(sex)
#create a subset of the sex data
sex <- surveys$sex
levels(sex)
#overwrite the missing label in "Sex"
levels(sex)[1] <- "Undetermined"
levels(sex)
plot(sex)
levels(sex) [2] <- "Female"
levels(sex)
levels(sex)[3] <- "Male"
levels(sex)
#or
levels(sex)[2,3] <- "Female", "Male"
#or
levels(sex)[2:3] <- c("Female", "Male")
levels(sex)
plot(sex)
#re-order the position of the factors to put "undetermined" last
sex <- factor(sex, levels = c("Female", "Male", "Undetermined"))
plot(sex)
#Installing Tidyverse
install.packages("tidyverse")
#Load the library
library("tidyverse")
#Load the surveys data again (more felixibility with read_csv instead of read.csv)
surveys <- read_csv("data/portal_data_joined.cvs")
View(surveys)
str(surveys)
surveys
head(surveys)
colanes(surveys)
colnames(surveys)
#Use square bracket subsetting to select rows from 1978 only
surveys[surveys$year=="1978"]
#Use square bracket subsetting to select rows from 1978 only
surveys[surveys$year=="1978", ]
#dplyr - for data manipulation
#filter - used to select rows - in dplyr:
filter(surveys, year == 1978)
#Select - for selecting columns
select(surveys, year, plot_id, species_id,)
surveys_filtered
surveys_filtered
#select only the three columns above but only from 1978
surveys_filtered <- filter(surveys, year == 1978)
surveys_filtered
select (surveys_filtered, year, plot_id, species_id)
#or
#stitching together with a pipe
# %>% - shortcut to type a pipe is shift-ctrl-m (same as pipe in Shell)
surveys %>% filter(year == 1978) %>% select(year, plot_id, species_id)
#to save this:
surveys_short <- surveys %>% filter(year == 1978) %>% select(year, plot_id, species_id)
View(surveys_short)
# Mutate - to create new columns based on existing columns or on some operations done on existing columns
surveys %>% select(weight, species)
#calculate the weight from g to kg
surveys %>% mutate(weight_kg <- weight/1000)
#calculate the weight from g to kg
surveys %>% mutate(weight_kg = weight/1000)
select(starts_with("w"))
#calculate the weight from g to kg
surveys %>% mutate(weight_kg = weight/1000) %>% select(starts_with("w"))
surveys %>% mutate(hindfoot_half = hindfoot_length/2) %>% select(species_id, hindfoot_half)
surveys %>% mutate(hindfoot_half = hindfoot_length/2) %>% filter(hindfoot_half < 30) %>% select(species_id, hindfoot_half)
#how to remove missing observations
surveys %>% mutate(weight_kg = weight/1000) %>% select(starts_with("w")) %>% filter(!is.na(weight)) #filters out rows in column weight that are not NA (missing data)
#how to have a summary overview of a dataset
table(surveys$year)
length(table(surveys$year))
summary(surveys)
#splitting and running calculations on groups
surveys %>% group_by(year) %>% summarise(mean_hindfoot_length = mean(hindfoot_length))
#need to remove NA before calculating average
surveys %>% group_by(year) %>% summarise(mean_hindfoot_length = mean(hindfoot_length, na.rm = TRUE))
surveys %>% group_by(sex, species_id)
surveys %>% filter(is.na(weight)) %>% group_by(sex, species_id) %>% summarise(mean_weight = mean(weight))
surveys %>% filter(!is.na(weight)) %>% group_by(sex, species_id) %>% summarise(mean_weight = mean(weight))
surveys %>% filter(!is.na(weight)) %>% group_by(sex, species_id) %>% summarise(mean_weight = mean(weight), sd_weight = sd(weight))
surveys %>% count(sex)
surveys %>% count(sex, species)
surveys %>% count(sex, species) %>% print(n=81)
surveys %>% count(species, sort = TRUE)
#arrange - used to arrange/sort rows
surveys %>% count(sex, species) %>% arrange(species, desc(n))
surveys %>% count(plot_type)
#Challenge 2
#How many individuals were caught in each plot_type? Answer in 2 ways, using group by and count
surveys %>% group_by(plot_type)
#Challenge 2
#How many individuals were caught in each plot_type? Answer in 2 ways, using group by and count
surveys %>% group_by(plot_type) %>% summarise(plot_type)
surveys %>% group_by(plot_type) %>% count(species)
surveys %>% group_by(plot_type) %>% n_distinct(plot_type)
surveys %>% group_by(plot_type) %>% count(plot_type)
surveys %>% group_by(plot_type) %>% tally()
#Challenge 3
#What is the heaviest animal measured in each year? Return columns year, genus, species_id and weight. DO not return missing observations.
surveys %>% filter(!is.na(weight)) %>% group_by(year, species_id, genus, weight) %>% arrange(weight, desc(n))
#Challenge 3
#What is the heaviest animal measured in each year? Return columns year, genus, species_id and weight. DO not return missing observations.
surveys %>% filter(!is.na(weight)) %>% group_by(year, species_id, genus, weight)
#Challenge 3
#What is the heaviest animal measured in each year? Return columns year, genus, species_id and weight. DO not return missing observations.
surveys %>% filter(!is.na(weight)) %>% select(year, species_id, genus, weight)
#Challenge 3
#What is the heaviest animal measured in each year? Return columns year, genus, species_id and weight. DO not return missing observations.
surveys %>% filter(!is.na(weight)) %>% select(year, species_id, genus, weight) %>% arrange(weight, desc(n))
#Challenge 3
#What is the heaviest animal measured in each year? Return columns year, genus, species_id and weight. DO not return missing observations.
surveys %>% filter(!is.na(weight)) %>% select(year, species_id, genus, weight) %>% group_by(year)
#Challenge 3
#What is the heaviest animal measured in each year? Return columns year, genus, species_id and weight. DO not return missing observations.
surveys %>% filter(!is.na(weight)) %>% group_by(year) %>% select(year, species_id, genus, weight)
#jarek's try:
surveys %>% group_by(year) %>% summarise(max_weight = max(weight))
#jarek's try:
surveys %>% group_by(year) %>% summarise(max_weight = max(weight)) %>% select(year, species_id, genus, weight, max_weight)
#jarek's try:
surveys %>% group_by(year) %>% select(year, species_id, genus, weight, max_weight) %>% summarise(max_weight = max(weight))
#jarek's try:
surveys %>% filter(!is.na(weight)) %>% group_by(year) %>% summarise(max_weight = max(weight))
surveys %>% filter(!is.na(weight)) %>% filter(weight == max(weight)) %>% select(year, species_id, genus, weight)
surveys %>% filter(!is.na(weight)) %>% group_by(year) %>% filter(weight == max(weight)) %>% select(year, species_id, genus, weight)
surveys %>% filter(!is.na(weight)) %>% group_by(year) %>% filter(weight == max(weight)) %>% select(year, species_id, genus, weight) %>% arrange(desc(weight))
surveys_complete <- filter(!is.na(weight), !is.na(hindfoot_length), !is.na(sex))
surveys_complete <- surveys %>% filter(!is.na(weight), !is.na(hindfoot_length), !is.na(sex))
species_count <- surveys_complete %>% count (species_id) %>% filter(n >= 50)
#reduce the surveys_complete object so that it onl contains species with at leat 50 observations (in species_counts)
surveys_complete <- surveys_complete %>% filter(species_id %in% species_count$species_id)
View(surveys_complete)
dim(surveys_complete)
write.csv(surveys_complete, "data/surveys_complete.cvs")
ggplot(data = surveys_complete)
ggplot(data = surveys_complete, mapping = aes(x = weight, y = hindfoot_length))
ggplot(data = surveys_complete, mapping = aes(x = weight, y = hindfoot_length))+ geom_point()
survey_plot <- ggplot(data = surveys_complete, mapping = aes(x = weight, y = hindfoot_length)) #save the data in one object, then you just use that to add GEOM
View(species_count)
ggplot(data = surveys_complete, mapping = aes(x = weight, y = hindfoot_length))+ geom_point()
ggplot(data = surveys_complete) #nothing really happens, it just takes in the data
ggplot(data = surveys_complete) #nothing really happens, it just takes in the data
surveys_complete %>% count(species_id)
#Load the library
library("tidyverse")
surveys_complete %>% count(species_id)
surveys_complete %>% count(species_id) %>% filter(n>=1000)
num_surveys_complete <- surveys_complete %>% count(species_id) %>% filter(n>=1000)
View(num_surveys_complete)
#go through surveys_complete and only find the species selected innum_species_complete
surveys_complete %>% filter(species_id %in% num_species$species_id)
#or just 1000 observations
num_surveys_complete <- surveys_complete %>% count(species_id) %>% filter(n>=1000)
#go through surveys_complete and only find the species selected innum_species_complete
surveys_complete %>% filter(species_id %in% num_species$species_id)
#go through surveys_complete and only find the species selected innum_species_complete
surveys_complete %>% filter(species_id %in% num_surveys_complete$species_id)
animals <- c("pig", "cat", "dog", "donkey", "gorilla", "mouse")
animals
animals <- c("pig", "cat", "dog", "donkey", "gorilla", "mouse", "zebra", "parrot", "camel")
other_animals <- c("zebra", "parrot", "donkey", "camel", "cat")
animals
animals %in% other_animals
other_animals %in% animals
intersect(animals, other_animals)
library("tidyverse")
ggplot(data = surveys_complete, mapping = aes(x = weight, y = hindfoot_length))+ geom_point()
#make points tranparent  - use alpha in geom point
ggplot(data = surveys_complete, mapping = aes(x = weight, y = hindfoot_length))+ geom_point(alpha = 0.1)
#make points tranparent  - use alpha in geom point
ggplot(data = surveys_complete, mapping = aes(x = weight, y = hindfoot_length))+ geom_point(alpha = 0.1, colour = "blue")
#colour different species - chnge aesthaetics
ggplot(data = surveys_complete, mapping = aes(x = weight, y = hindfoot_length))+ geom_point(alpha = 0.1, aes(color = species_id))
#new type of image
ggplot(data = surveys_complete, mapping = aes(x = species_id, y = weight))+ geom_boxplot
#new type of image
ggplot(data = surveys_complete, mapping = aes(x = species_id, y = weight))+ geom_boxplot()
ggplot(data = surveys_complete, mapping = aes(x = species_id, y = hindfoot_length))+ geom_boxplot() + geom_jitter(alpha = 0.1, colour = "tomato")
yearly_counts <- surveys_complete %>% group_by(year, species_id) %>% tally()
surveys_complete %>% group_by(year, species_id)
surveys_complete %>% group_by(year, species_id) %>% tally()
yearly_counts
ggplot(data = yearly_counts, mapping =aes(x = year, y = n)) + geom_line()
#we want to see it for each different species
ggplot(data = yearly_counts, mapping =aes(x = year, y = n, group = species_id)) + geom_line()
#need some colour to distinguish beteen species
ggplot(data = yearly_counts, mapping =aes(x = year, y = n, group = species_id)) + geom_line(colour = species_id)
#need some colour to distinguish beteen species
ggplot(data = yearly_counts, mapping =aes(x = year, y = n, colour = species_id)) + geom_line()
#faceting - splitting display of data into multiple subgroups (multiple graphs blotted together) - facet_wrap (~X)
ggplot(data = yearly_counts, mapping =aes(x = year, y = n)) + geom_line() + facet_wrap(~species_id)
yearly_sex_counts <- surveys_complete %>% group_by(year, species_id, sex) %>% tally()
yearly_sex_counts
ggplot(data = yearly_sex_counts, mapping =aes(x = year, y = n, colour = sex)) + geom_line() + facet_wrap(~species_id)
#add title in figure
ggplot(data = yearly_sex_counts, mapping =aes(x = year, y = n, colour = sex)) + geom_line() + facet_wrap(~species_id) + ggtitle("Species counts over time")
#add labels - labs function
ggplot(data = yearly_sex_counts, mapping =aes(x = year, y = n, colour = sex)) + geom_line() + facet_wrap(~species_id) + labs(title = "Speices counts over time", x = "Year of observation", y = Number of species)
#add labels - labs function
ggplot(data = yearly_sex_counts, mapping =aes(x = year, y = n, colour = sex)) + geom_line() + facet_wrap(~species_id) + labs(title = "Speices counts over time", x = "Year of observation", y = "Number of species")
#theme
ggplot(data = yearly_sex_counts, mapping =aes(x = year, y = n, colour = sex)) + geom_line() + facet_wrap(~species_id) + labs(title = "Speices counts over time", x = "Year of observation", y = "Number of species") + theme(axis.text.x = element_text(angle = 45)) )
#theme
ggplot(data = yearly_sex_counts, mapping =aes(x = year, y = n, colour = sex)) + geom_line() + facet_wrap(~species_id) + labs(title = "Spieces counts over time", x = "Year of observation", y = "Number of species") + theme(axis.text.x = element_text(angle = 45)) )
#add labels - labs function
ggplot(data = yearly_sex_counts, mapping =aes(x = year, y = n, colour = sex)) + geom_line() + facet_wrap(~species_id) + labs(title = "Speices counts over time", x = "Year of observation", y = "Number of species")
#theme
ggplot(data = yearly_sex_counts, mapping =aes(x = year, y = n, colour = sex)) + geom_line() + facet_wrap(~species_id) + labs(title = "Spieces counts over time", x = "Year of observation", y = "Number of species") + theme(axis.text.x = element_text(angle = 45))
#theme
ggplot(data = yearly_sex_counts, mapping =aes(x = year, y = n, colour = sex)) + geom_line() + facet_wrap(~species_id) + labs(title = "Species counts over time", x = "Year of observation", y = "Number of species") + theme(axis.text.x = element_text(angle = 45))
ggsave("data/my_fancy_plot.tiff", width = 15, height = 10, dpi = 300)
